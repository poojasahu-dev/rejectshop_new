//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-147 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.06.24 at 01:03:43 PM IST 
//


package au.com.rejecshop.xml.price.beans;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for TenderTypeCodeEnumeration.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="TenderTypeCodeEnumeration">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *     &lt;enumeration value="Cash"/>
 *     &lt;enumeration value="CreditDebit"/>
 *     &lt;enumeration value="Check"/>
 *     &lt;enumeration value="HouseAccount"/>
 *     &lt;enumeration value="PurchaseOrder"/>
 *     &lt;enumeration value="FoodStamps"/>
 *     &lt;enumeration value="Voucher"/>
 *     &lt;enumeration value="ManufacturerCoupon"/>
 *     &lt;enumeration value="CoPay"/>
 *     &lt;enumeration value="Loyalty"/>
 *     &lt;enumeration value="TravelersCheck"/>
 *     &lt;enumeration value="CheckCard"/>
 *     &lt;enumeration value="GiftCertificate"/>
 *     &lt;enumeration value="StoredValue"/>
 *     &lt;enumeration value="WICCheck"/>
 *     &lt;enumeration value="CustomerAccount"/>
 *     &lt;enumeration value="Coupon"/>
 *     &lt;enumeration value="UKMaestro"/>
 *     &lt;enumeration value="CapitalBond"/>
 *     &lt;enumeration value="StaffDressAllowance"/>
 *     &lt;enumeration value="AirmilesConversion"/>
 *     &lt;enumeration value="InternationalMaestro"/>
 *     &lt;enumeration value="ElectronicTollCollection"/>
 *     &lt;enumeration value="AccountsReceivable"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "TenderTypeCodeEnumeration")
@XmlEnum
public enum TenderTypeCodeEnumeration {

    @XmlEnumValue("Cash")
    CASH("Cash"),
    @XmlEnumValue("CreditDebit")
    CREDIT_DEBIT("CreditDebit"),
    @XmlEnumValue("Check")
    CHECK("Check"),
    @XmlEnumValue("HouseAccount")
    HOUSE_ACCOUNT("HouseAccount"),
    @XmlEnumValue("PurchaseOrder")
    PURCHASE_ORDER("PurchaseOrder"),
    @XmlEnumValue("FoodStamps")
    FOOD_STAMPS("FoodStamps"),
    @XmlEnumValue("Voucher")
    VOUCHER("Voucher"),
    @XmlEnumValue("ManufacturerCoupon")
    MANUFACTURER_COUPON("ManufacturerCoupon"),
    @XmlEnumValue("CoPay")
    CO_PAY("CoPay"),
    @XmlEnumValue("Loyalty")
    LOYALTY("Loyalty"),
    @XmlEnumValue("TravelersCheck")
    TRAVELERS_CHECK("TravelersCheck"),
    @XmlEnumValue("CheckCard")
    CHECK_CARD("CheckCard"),
    @XmlEnumValue("GiftCertificate")
    GIFT_CERTIFICATE("GiftCertificate"),
    @XmlEnumValue("StoredValue")
    STORED_VALUE("StoredValue"),
    @XmlEnumValue("WICCheck")
    WIC_CHECK("WICCheck"),
    @XmlEnumValue("CustomerAccount")
    CUSTOMER_ACCOUNT("CustomerAccount"),
    @XmlEnumValue("Coupon")
    COUPON("Coupon"),
    @XmlEnumValue("UKMaestro")
    UK_MAESTRO("UKMaestro"),
    @XmlEnumValue("CapitalBond")
    CAPITAL_BOND("CapitalBond"),
    @XmlEnumValue("StaffDressAllowance")
    STAFF_DRESS_ALLOWANCE("StaffDressAllowance"),
    @XmlEnumValue("AirmilesConversion")
    AIRMILES_CONVERSION("AirmilesConversion"),
    @XmlEnumValue("InternationalMaestro")
    INTERNATIONAL_MAESTRO("InternationalMaestro"),
    @XmlEnumValue("ElectronicTollCollection")
    ELECTRONIC_TOLL_COLLECTION("ElectronicTollCollection"),
    @XmlEnumValue("AccountsReceivable")
    ACCOUNTS_RECEIVABLE("AccountsReceivable");
    private final String value;

    TenderTypeCodeEnumeration(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TenderTypeCodeEnumeration fromValue(String v) {
        for (TenderTypeCodeEnumeration c: TenderTypeCodeEnumeration.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
